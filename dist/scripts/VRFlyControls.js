THREE.VRFlyControls=function(t,e,o){function i(t,e){return function(){e.apply(t,arguments)}}this.object=t,this.domElement=void 0!==e?e:document,e&&this.domElement.setAttribute("tabindex",-1),this.plane=new THREE.Object3D,this.plane.position.copy(this.object.position),this.haveEvents="ongamepadconnected"in window,this.controllers={},this.haveEvents||setInterval(this.scangamepads,500);var a,s=function(t){for(var e=0;e<t.length;e++){var i=t[e];if(i instanceof PositionSensorVRDevice)return void(a=t[e])}void 0!==o&&o("HMD not available")};void 0!==navigator.getVRDevices?navigator.getVRDevices().then(s):void 0!==o&&o("Your browser is not VR Ready"),this.movementSpeed=1,this.rollSpeed=.01,this.dragToLook=!1,this.autoForward=!1,this.tmpQuaternion=new THREE.Quaternion,this.vrQuaternion=new THREE.Quaternion,this.mouseStatus=0,this.moveState={up:0,down:0,left:0,right:0,forward:0,back:0,pitchUp:0,pitchDown:0,yawLeft:0,yawRight:0,rollLeft:0,rollRight:0},this.moveVector=new THREE.Vector3(0,0,0),this.rotationVector=new THREE.Vector3(0,0,0),this.handleEvent=function(t){"function"==typeof this[t.type]&&this[t.type](t)},this.keydown=function(t){if(!t.altKey){switch(t.keyCode){case 16:this.movementSpeedMultiplier=.1;break;case 87:this.moveState.forward=1;break;case 83:this.moveState.back=1;break;case 65:this.moveState.left=1;break;case 68:this.moveState.right=1;break;case 82:this.moveState.up=1;break;case 70:this.moveState.down=1;break;case 38:this.moveState.pitchUp=1;break;case 40:this.moveState.pitchDown=1;break;case 37:this.moveState.yawLeft=1;break;case 39:this.moveState.yawRight=1;break;case 81:this.moveState.rollLeft=1;break;case 69:this.moveState.rollRight=1}this.updateMovementVector(),this.updateRotationVector()}},this.keyup=function(t){switch(t.keyCode){case 16:this.movementSpeedMultiplier=1;break;case 87:this.moveState.forward=0;break;case 83:this.moveState.back=0;break;case 65:this.moveState.left=0;break;case 68:this.moveState.right=0;break;case 82:this.moveState.up=0;break;case 70:this.moveState.down=0;break;case 38:this.moveState.pitchUp=0;break;case 40:this.moveState.pitchDown=0;break;case 37:this.moveState.yawLeft=0;break;case 39:this.moveState.yawRight=0;break;case 81:this.moveState.rollLeft=0;break;case 69:this.moveState.rollRight=0}this.updateMovementVector(),this.updateRotationVector()},this.update=function(t){var e=t*this.movementSpeed,o=this.rollSpeed;for(var i in this.controllers){var s=this.controllers[i];(s.axes[1]>.5||s.axes[1]<-.5)&&(this.moveVector.z=s.axes[1]),(s.axes[0]>.5||s.axes[0]<-.5)&&(this.rotationVector.y=-s.axes[0]),(s.axes[2]>.5||s.axes[2]<-.5)&&(this.rotationVector.z=-s.axes[2]),(s.axes[3]>.5||s.axes[3]<-.5)&&(this.rotationVector.x=s.axes[3])}this.plane.translateX(this.moveVector.x*e),this.plane.translateY(this.moveVector.y*e),this.plane.translateZ(this.moveVector.z*e),this.tmpQuaternion.set(this.rotationVector.x*o,this.rotationVector.y*o,this.rotationVector.z*o,1).normalize(),this.plane.quaternion.multiply(this.tmpQuaternion),this.plane.rotation.setFromQuaternion(this.plane.quaternion,this.plane.rotation.order),this.object.position.copy(this.plane.position);var n=a.getState();null!==n.orientation&&this.vrQuaternion.set(n.orientation.x,n.orientation.y,n.orientation.z,n.orientation.w).normalize(),this.tmpQuaternion.copy(this.plane.quaternion),this.object.rotation.setFromQuaternion(this.tmpQuaternion.multiply(this.vrQuaternion)),this.rotationVector.set(0,0,0),this.moveVector.set(0,0,0)},this.updateMovementVector=function(){var t=this.moveState.forward||this.autoForward&&!this.moveState.back?1:0;this.moveVector.x=-this.moveState.left+this.moveState.right,this.moveVector.y=-this.moveState.down+this.moveState.up,this.moveVector.z=-t+this.moveState.back},this.updateRotationVector=function(){this.rotationVector.x=-this.moveState.pitchDown+this.moveState.pitchUp,this.rotationVector.y=-this.moveState.yawRight+this.moveState.yawLeft,this.rotationVector.z=-this.moveState.rollRight+this.moveState.rollLeft},this.getContainerDimensions=function(){return this.domElement!==document?{size:[this.domElement.offsetWidth,this.domElement.offsetHeight],offset:[this.domElement.offsetLeft,this.domElement.offsetTop]}:{size:[window.innerWidth,window.innerHeight],offset:[0,0]}},this.connecthandler=function(t){this.addgamepad(t.gamepad)},this.addgamepad=function(t){this.controllers[t.index]=t,console.log("addgamepad: ",this.controllers)},this.disconnecthandler=function(t){this.removegamepad(t.gamepad)},this.removegamepad=function(t){delete this.controllers[t.index]},this.scangamepads=function(){for(var t=navigator.getGamepads?navigator.getGamepads():navigator.webkitGetGamepads?navigator.webkitGetGamepads():[],e=0;e<t.length;e++)t[e]&&(t[e].index in this.controllers?(this.controllers[t[e].index]=t[e],console.log("controllers: ",this.controllers)):this.addgamepad(t[e]))},this.domElement.addEventListener("contextmenu",function(t){t.preventDefault()},!1),window.addEventListener("keydown",i(this,this.keydown),!1),window.addEventListener("keyup",i(this,this.keyup),!1),window.addEventListener("gamepadconnected",i(this,this.connecthandler),!1),window.addEventListener("gamepaddisconnected",i(this,this.disconnecthandler),!1),this.updateMovementVector(),this.updateRotationVector()};